# Azure Pipelines to build & publish project exter_demo
# Language: Go
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
  branches:
    include:
      - '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  appName: 'exter-demo'
  appVersion: '1.0'
  goVersion: '1.13.14'
  goBuiltAppName: 'main'
  dockerRegistryConnection: 'dockerRegistryServiceConnectionDockerHub'
  branchMasterChanged: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/master') }}

stages:
  - stage: build
    displayName: Build project
    jobs:
      - job: build_and_test
        displayName: Build project and run tests
        steps:
          - task: GoTool@0
            displayName: Prepare Go env
            inputs:
              version: '$(goVersion)'
          - task: Go@0
            displayName: Go build
            inputs:
              command: 'build'
              arguments: '-o $(goBuiltAppName) -tags netgo -a'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
          - task: Go@0
            displayName: Go test
            inputs:
              command: 'test'
              arguments: '-v --cover'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
          - task: CopyFiles@2
            displayName: Copy build to binary
            inputs:
              sourceFolder: '$(System.DefaultWorkingDirectory)'
              targetFolder: '$(Build.BinariesDirectory)'
              contents: |
                $(goBuiltAppName)
                *.md
                Dockerfile
          - task: PublishPipelineArtifact@1
            displayName: Publish artifact
            inputs:
              targetPath: '$(Build.BinariesDirectory)'
              artifactName: '$(appName)'

  - stage: build_publish_docker
    displayName: Build and publish Docker image
    dependsOn: build
    # condition: eq(variables['branchMasterChanged'], true)
    variables:
      - group: Release
    jobs:
      - job: build_publish_docker
        displayName: Build and publish Docker image
        steps:
          - task: DockerInstaller@0
            displayName: Prepare Docker CLI
            inputs:
              dockerVersion: '19.03.9'
              releaseType: 'stable'
          - task: DownloadPipelineArtifact@2
            displayName: Prepare artifact
            inputs:
              artifact: '$(appName)'
              path: '$(Build.ArtifactStagingDirectory)'
          - task: Docker@2
            displayName: Login to Docker Registry
            inputs:
              command: login
              containerRegistry: '$(dockerRegistryConnection)'
          - task: Docker@2
            displayName: Build and push Docker image
            inputs:
              command: buildAndPush
              containerRegistry: '$(dockerRegistryConnection)'
              buildContext: '$(Build.ArtifactStagingDirectory)'
              repository: '$(DockerRegistryAccount)$(appName)'
              tags: |
                $(appVersion)
                latest
          - task: Docker@2
            displayName: Logout from Docker Registry
            inputs:
              command: logout
              containerRegistry: '$(dockerRegistryConnection)'

  - stage: deploy
    displayName: Deploy application
    dependsOn: build_publish_docker
    variables:
      - group: Release    
    jobs:
      - job: deploy_heroku
        displayName: Deploy to Heroku
        steps:
          - script: curl https://cli-assets.heroku.com/install.sh | sh
            displayName: Prepare Heroku CLI
          - task: DockerInstaller@0
            displayName: Prepare Docker CLI
            inputs:
              dockerVersion: '19.03.9'
              releaseType: 'stable'
          - script: docker pull '$(DockerRegistryAccount)$(appName):$(appVersion)'
            displayName: Pull Docker image
          - script: |
              echo Logging in to registry.heroku.com...
              export HEROKU_API_KEY=$(HerokuToken)
              echo $(HerokuToken) | docker login -u _ --password-stdin registry.heroku.com
              docker tag $(DockerRegistryAccount)$(appName):$(appVersion) registry.heroku.com/demo-exterapp/web
              docker images
              echo Pushing image...
              docker push registry.heroku.com/demo-exterapp/web
              echo Releasing image...
              heroku container:release web -a demo-exterapp
              echo Logging out...
              docker logout registry.heroku.com
              unset HEROKU_API_KEY
            displayName: Push and Deploy to Heroku
